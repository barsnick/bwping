name: "Build"

on:
  push:
    branches:
    - master

  pull_request:
    branches:
    - master

  schedule:
  - cron: "0 10 * * 6"

jobs:
  linux-gcc:
    name: "Build Linux GCC (${{ matrix.config.name }})"
    runs-on: ubuntu-latest

    strategy:
      matrix:
        config:
        - { name: "default",         options: "" }
        - { name: "no mmsg",         options: "--disable-mmsg" }
        - { name: "no bpf",          options: "--disable-bpf" }
        - { name: "no mmsg, no bpf", options: "--disable-mmsg --disable-bpf" }

    defaults:
      run:
        shell: bash

    steps:
    - name: "Checkout repository"
      uses: actions/checkout@v2
      with:
        fetch-depth: 2

    - name: "Checkout HEAD^2 for pull request"
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        git checkout HEAD^2

    - name: "Run build"
      env:
        CC: gcc
      run: |
        autoreconf --force
        ./configure ${{ matrix.config.options }}
        make "CFLAGS=-Werror -fsanitize=address,undefined"

    - name: "Run checks"
      run: |
        sudo make check

    - name: "Upload check results"
      if: ${{ failure() }}
      uses: actions/upload-artifact@v2
      with:
        name: "check-results-linux-gcc"
        path: tests/*.log

  linux-clang:
    name: "Build Linux Clang (${{ matrix.config.name }})"
    runs-on: ubuntu-latest

    strategy:
      matrix:
        config:
        - { name: "default",         options: "" }
        - { name: "no mmsg",         options: "--disable-mmsg" }
        - { name: "no bpf",          options: "--disable-bpf" }
        - { name: "no mmsg, no bpf", options: "--disable-mmsg --disable-bpf" }

    defaults:
      run:
        shell: bash

    steps:
    - name: "Checkout repository"
      uses: actions/checkout@v2
      with:
        fetch-depth: 2

    - name: "Checkout HEAD^2 for pull request"
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        git checkout HEAD^2

    - name: "Install additional packages"
      run: |
        sudo apt-get update
        sudo apt-get -y install clang-tools

    - name: "Run build"
      env:
        CC: clang
      run: |
        autoreconf --force
        ./configure ${{ matrix.config.options }}
        make "CFLAGS=-Werror -fsanitize=address,undefined"

    - name: "Run checks"
      run: |
        sudo make check

    - name: "Upload check results"
      if: ${{ failure() }}
      uses: actions/upload-artifact@v2
      with:
        name: "check-results-linux-clang"
        path: tests/*.log

    - name: "Run Clang Static Analyzer"
      run: |
        make distclean
        autoreconf --force
        scan-build ./configure ${{ matrix.config.options }}
        scan-build --status-bugs make "CFLAGS=-std=c11 -Werror"

  macos:
    name: "Build MacOS"
    runs-on: macos-latest

    defaults:
      run:
        shell: bash

    steps:
    - name: "Checkout repository"
      uses: actions/checkout@v2
      with:
        fetch-depth: 2

    - name: "Checkout HEAD^2 for pull request"
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        git checkout HEAD^2

    - name: "Install additional packages"
      run: |
        brew install automake

    - name: "Run build"
      run: |
        autoreconf --force
        ./configure
        make "CFLAGS=-Werror -fsanitize=address,undefined"

    - name: "Run checks"
      run: |
        sudo make check TESTS="$(find tests -type f -perm -u=x | grep -v "^tests/sanity$" | tr "\n" " ")"

    - name: "Upload check results"
      if: ${{ failure() }}
      uses: actions/upload-artifact@v2
      with:
        name: "check-results-macos"
        path: tests/*.log

  cygwin:
    name: "Build Cygwin"
    runs-on: windows-latest

    defaults:
      run:
        shell: bash

    steps:
    - name: "Checkout repository"
      uses: actions/checkout@v2
      with:
        fetch-depth: 2

    - name: "Checkout HEAD^2 for pull request"
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        git checkout HEAD^2

    - name: "Install additional packages"
      run: |
        choco.exe install cygwin cyg-get
        cyg-get.bat autoconf automake make gcc-core git

    - name: "Fix line endings"
      run: |
        cmd.exe //c C:\\tools\\cygwin\\bin\\bash.exe -l -c " \
            cd \"$GITHUB_WORKSPACE\" && \
            git ls-files -z | xargs -0 rm && \
            git checkout -f ."

    - name: "Run build"
      run: |
        cmd.exe //c C:\\tools\\cygwin\\bin\\bash.exe -l -c " \
            cd \"$GITHUB_WORKSPACE\" && \
            autoreconf --force && \
            ./configure && \
            make \"CFLAGS=-Werror\""

    - name: "Run checks"
      run: |
        cmd.exe //c C:\\tools\\cygwin\\bin\\bash.exe -l -c " \
            cd \"$GITHUB_WORKSPACE\" && \
            make check && \
            make distcheck"

    - name: "Upload check results"
      if: ${{ failure() }}
      uses: actions/upload-artifact@v2
      with:
        name: "check-results-cygwin"
        path: tests/*.log
