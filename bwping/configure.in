AC_INIT(bwping)
AC_CONFIG_SRCDIR([ChangeLog])
AM_INIT_AUTOMAKE(bwping,1.7)
AM_CONFIG_HEADER(config.h)
AC_PROG_CC
AC_PROG_INSTALL
AC_CHECK_HEADERS(unistd.h stdlib.h)
AC_CHECK_MEMBER([struct sockaddr_in.sin_len],
		[ AC_DEFINE(HAVE_SOCKADDR_IN_SIN_LEN, 1, [Do we have sockaddr_in.sin_len?]) ],
		[],
		[
#include <sys/types.h>
#include <netinet/in.h>
		])
AC_CHECK_FUNC(socket)
if test $ac_cv_func_socket = no; then
    AC_CHECK_LIB(socket, socket, [], [ echo "socket() is required for build"; exit -1 ])
fi
AC_CHECK_FUNC(inet_aton)
if test $ac_cv_func_inet_aton = no; then
    AC_CHECK_LIB(resolv, inet_aton, [], [ echo "inet_aton() is required for build"; exit -1 ])
fi
AC_CHECK_FUNC(inet_ntop)
if test $ac_cv_func_inet_ntop = no; then
    AC_CHECK_LIB(resolv, inet_ntop, [], [ echo "inet_ntop() is required for build"; exit -1 ])
fi
AC_CHECK_FUNC(gethostbyname)
if test $ac_cv_func_gethostbyname = no; then
    AC_SEARCH_LIBS(gethostbyname, [nsl socket], [], [ echo "gethostbyname() is required for build"; exit -1 ])
fi
AC_CHECK_FUNC(getaddrinfo)
if test $ac_cv_func_getaddrinfo = no; then
    AC_SEARCH_LIBS(getaddrinfo, [nsl socket], [], [ echo "getaddrinfo() is required for build"; exit -1 ])
fi
AC_MSG_CHECKING(for IPv6 support)
AC_CACHE_VAL(ac_cv_ipv6,
		AC_TRY_RUN([
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>

/* Make sure the definitions for AF_INET6 and struct sockaddr_in6
 * are defined, and that we can actually create an IPv6 TCP socket.
 */

main()
{
    int fd;
    struct sockaddr_in6 foo;
    fd = socket(AF_INET6, SOCK_STREAM, 0);
    exit(fd >= 0 ? 0 : 1);
}
		],
		ac_cv_ipv6=yes,
		ac_cv_ipv6=no,
		ac_cv_ipv6=no))
AC_MSG_RESULT($ac_cv_ipv6)
if test $ac_cv_ipv6 = yes ; then
    AC_DEFINE(IPV6,, "check if system supports IPV6")
fi
AM_CONDITIONAL([BUILDIPV6], [ test $ac_cv_ipv6 = yes ])
AC_OUTPUT(Makefile)
